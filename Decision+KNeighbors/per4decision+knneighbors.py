# -*- coding: utf-8 -*-
"""Per4Decision+KNneighbors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cD1r0fbRKh2fwEGqY9hdDm-nbj42WzjC
"""

from sklearn.tree import DecisionTreeClassifier

# Data latih
X_train = [
    [178, 65],
    [155, 50],
    [180, 80],
    [168, 55],
    [175, 70],
    [165, 58],
    [168, 63],
    [172, 68],
    [178, 75],
    [162, 52],
    [169, 67],
    [163, 54],
    [176, 72],
    [181, 78],
    [166, 60]
]

y_train = [
    "Laki-laki", "Perempuan", "Laki-laki", "Perempuan", "Laki-laki",
    "Perempuan", "Laki-laki", "Laki-laki", "Laki-laki", "Perempuan",
    "Laki-laki", "Perempuan", "Laki-laki", "Laki-laki", "Perempuan"
]

# Inisialisasi model Decision Tree
tree = DecisionTreeClassifier()

# Melatih model
tree.fit(X_train, y_train)

# Data tanpa label
unlabelled = [[175, 70]]  # Contoh data tanpa label

# Melakukan prediksi
hasil = tree.predict(unlabelled)
print("Hasil prediksi:", hasil[0])



import pandas as pd
sensus = {
    'tinggi': [158, 178, 183, 191, 155, 163, 188, 158, 178],
    'berat' : [64, 86, 84, 88, 48, 59, 67, 54, 67],
    'jenis_kelamin' : [ 'pria', 'pria', 'pria', 'pria', 'wanita', 'wanita', 'wanita', 'wanita','wanita']
}
sensus_df = pd.DataFrame(sensus)
sensus_df

import matplotlib.pyplot as plt

fig, ax = plt.subplots()
for jenis_kelamin, d in sensus_df.groupby('jenis_kelamin'):
 ax.scatter(d['tinggi'], d['berat'], label=jenis_kelamin)

plt.legend(loc='upper left')
plt.title('Sebaran Data Tinggi Badan, Berat Badan, dan Jenis Kelamin')
plt.xlabel('Tinggi Badan (cm)')
plt.ylabel('Berat Badan(kg)')
plt.grid(True)
plt.show()

import numpy as np
x_train = np.array(sensus_df[['tinggi','berat']])
y_train = np.array(sensus_df['jenis_kelamin'])

print(f'x_train:\n{x_train}\n')
print(f'y_train: {y_train}')

from sklearn.preprocessing import LabelBinarizer

lb=LabelBinarizer()
y_train = lb.fit_transform(y_train)
print(f'y_train:\n{y_train}')

y_train=y_train.flatten()
print(f'y_train:{y_train}')

from sklearn.neighbors import KNeighborsClassifier
K=3
model = KNeighborsClassifier(n_neighbors=K)
model.fit(x_train, y_train)

tinggi_badan = 155
berat_badan = 70
x_new = np.array([tinggi_badan, berat_badan]).reshape(1, -1)
x_new

y_new = model.predict(x_new)
y_new

lb.inverse_transform(y_new)

target = np.array([tinggi_badan, berat_badan])
target

x_train

from scipy.spatial.distance import euclidean

data_jarak = [euclidean(target, d) for d in x_train]
data_jarak

sensus_df['jarak']=data_jarak
sensus_df.sort_values(['jarak'])